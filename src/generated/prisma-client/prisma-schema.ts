// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCampaign {
  count: Int!
}

type AggregateDislike {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateSpark {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Campaign {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User!
  sparks(where: SparkWhereInput, orderBy: SparkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Spark!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  dislikes(where: DislikeWhereInput, orderBy: DislikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dislike!]
}

type CampaignConnection {
  pageInfo: PageInfo!
  edges: [CampaignEdge]!
  aggregate: AggregateCampaign!
}

input CampaignCreateInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutCampaignsInput!
  sparks: SparkCreateManyWithoutCampaignInput
  likes: LikeCreateManyWithoutCampaignInput
  dislikes: DislikeCreateManyWithoutCampaignInput
}

input CampaignCreateManyWithoutPostedByInput {
  create: [CampaignCreateWithoutPostedByInput!]
  connect: [CampaignWhereUniqueInput!]
}

input CampaignCreateOneWithoutDislikesInput {
  create: CampaignCreateWithoutDislikesInput
  connect: CampaignWhereUniqueInput
}

input CampaignCreateOneWithoutLikesInput {
  create: CampaignCreateWithoutLikesInput
  connect: CampaignWhereUniqueInput
}

input CampaignCreateOneWithoutSparksInput {
  create: CampaignCreateWithoutSparksInput
  connect: CampaignWhereUniqueInput
}

input CampaignCreateWithoutDislikesInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutCampaignsInput!
  sparks: SparkCreateManyWithoutCampaignInput
  likes: LikeCreateManyWithoutCampaignInput
}

input CampaignCreateWithoutLikesInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutCampaignsInput!
  sparks: SparkCreateManyWithoutCampaignInput
  dislikes: DislikeCreateManyWithoutCampaignInput
}

input CampaignCreateWithoutPostedByInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  sparks: SparkCreateManyWithoutCampaignInput
  likes: LikeCreateManyWithoutCampaignInput
  dislikes: DislikeCreateManyWithoutCampaignInput
}

input CampaignCreateWithoutSparksInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutCampaignsInput!
  likes: LikeCreateManyWithoutCampaignInput
  dislikes: DislikeCreateManyWithoutCampaignInput
}

type CampaignEdge {
  node: Campaign!
  cursor: String!
}

enum CampaignOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type CampaignPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

input CampaignScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [CampaignScalarWhereInput!]
  OR: [CampaignScalarWhereInput!]
  NOT: [CampaignScalarWhereInput!]
}

type CampaignSubscriptionPayload {
  mutation: MutationType!
  node: Campaign
  updatedFields: [String!]
  previousValues: CampaignPreviousValues
}

input CampaignSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CampaignWhereInput
  AND: [CampaignSubscriptionWhereInput!]
}

input CampaignUpdateInput {
  id: ID
  createdAt: DateTime
  description: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutCampaignsInput
  sparks: SparkUpdateManyWithoutCampaignInput
  likes: LikeUpdateManyWithoutCampaignInput
  dislikes: DislikeUpdateManyWithoutCampaignInput
}

input CampaignUpdateManyDataInput {
  id: ID
  createdAt: DateTime
  description: String
  url: String
}

input CampaignUpdateManyMutationInput {
  id: ID
  createdAt: DateTime
  description: String
  url: String
}

input CampaignUpdateManyWithoutPostedByInput {
  create: [CampaignCreateWithoutPostedByInput!]
  delete: [CampaignWhereUniqueInput!]
  connect: [CampaignWhereUniqueInput!]
  set: [CampaignWhereUniqueInput!]
  disconnect: [CampaignWhereUniqueInput!]
  update: [CampaignUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [CampaignUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [CampaignScalarWhereInput!]
  updateMany: [CampaignUpdateManyWithWhereNestedInput!]
}

input CampaignUpdateManyWithWhereNestedInput {
  where: CampaignScalarWhereInput!
  data: CampaignUpdateManyDataInput!
}

input CampaignUpdateOneWithoutDislikesInput {
  create: CampaignCreateWithoutDislikesInput
  update: CampaignUpdateWithoutDislikesDataInput
  upsert: CampaignUpsertWithoutDislikesInput
  delete: Boolean
  disconnect: Boolean
  connect: CampaignWhereUniqueInput
}

input CampaignUpdateOneWithoutLikesInput {
  create: CampaignCreateWithoutLikesInput
  update: CampaignUpdateWithoutLikesDataInput
  upsert: CampaignUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: CampaignWhereUniqueInput
}

input CampaignUpdateOneWithoutSparksInput {
  create: CampaignCreateWithoutSparksInput
  update: CampaignUpdateWithoutSparksDataInput
  upsert: CampaignUpsertWithoutSparksInput
  delete: Boolean
  disconnect: Boolean
  connect: CampaignWhereUniqueInput
}

input CampaignUpdateWithoutDislikesDataInput {
  id: ID
  createdAt: DateTime
  description: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutCampaignsInput
  sparks: SparkUpdateManyWithoutCampaignInput
  likes: LikeUpdateManyWithoutCampaignInput
}

input CampaignUpdateWithoutLikesDataInput {
  id: ID
  createdAt: DateTime
  description: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutCampaignsInput
  sparks: SparkUpdateManyWithoutCampaignInput
  dislikes: DislikeUpdateManyWithoutCampaignInput
}

input CampaignUpdateWithoutPostedByDataInput {
  id: ID
  createdAt: DateTime
  description: String
  url: String
  sparks: SparkUpdateManyWithoutCampaignInput
  likes: LikeUpdateManyWithoutCampaignInput
  dislikes: DislikeUpdateManyWithoutCampaignInput
}

input CampaignUpdateWithoutSparksDataInput {
  id: ID
  createdAt: DateTime
  description: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutCampaignsInput
  likes: LikeUpdateManyWithoutCampaignInput
  dislikes: DislikeUpdateManyWithoutCampaignInput
}

input CampaignUpdateWithWhereUniqueWithoutPostedByInput {
  where: CampaignWhereUniqueInput!
  data: CampaignUpdateWithoutPostedByDataInput!
}

input CampaignUpsertWithoutDislikesInput {
  update: CampaignUpdateWithoutDislikesDataInput!
  create: CampaignCreateWithoutDislikesInput!
}

input CampaignUpsertWithoutLikesInput {
  update: CampaignUpdateWithoutLikesDataInput!
  create: CampaignCreateWithoutLikesInput!
}

input CampaignUpsertWithoutSparksInput {
  update: CampaignUpdateWithoutSparksDataInput!
  create: CampaignCreateWithoutSparksInput!
}

input CampaignUpsertWithWhereUniqueWithoutPostedByInput {
  where: CampaignWhereUniqueInput!
  update: CampaignUpdateWithoutPostedByDataInput!
  create: CampaignCreateWithoutPostedByInput!
}

input CampaignWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  postedBy: UserWhereInput
  sparks_some: SparkWhereInput
  likes_some: LikeWhereInput
  dislikes_some: DislikeWhereInput
  AND: [CampaignWhereInput!]
}

input CampaignWhereUniqueInput {
  id: ID
}

scalar DateTime

type Dislike {
  id: ID!
  spark: Spark
  user: User!
  campaign: Campaign
}

type DislikeConnection {
  pageInfo: PageInfo!
  edges: [DislikeEdge]!
  aggregate: AggregateDislike!
}

input DislikeCreateInput {
  id: ID!
  spark: SparkCreateOneWithoutDislikesInput
  user: UserCreateOneWithoutDislikesInput!
  campaign: CampaignCreateOneWithoutDislikesInput
}

input DislikeCreateManyWithoutCampaignInput {
  create: [DislikeCreateWithoutCampaignInput!]
  connect: [DislikeWhereUniqueInput!]
}

input DislikeCreateManyWithoutSparkInput {
  create: [DislikeCreateWithoutSparkInput!]
  connect: [DislikeWhereUniqueInput!]
}

input DislikeCreateManyWithoutUserInput {
  create: [DislikeCreateWithoutUserInput!]
  connect: [DislikeWhereUniqueInput!]
}

input DislikeCreateWithoutCampaignInput {
  id: ID!
  spark: SparkCreateOneWithoutDislikesInput
  user: UserCreateOneWithoutDislikesInput!
}

input DislikeCreateWithoutSparkInput {
  id: ID!
  user: UserCreateOneWithoutDislikesInput!
  campaign: CampaignCreateOneWithoutDislikesInput
}

input DislikeCreateWithoutUserInput {
  id: ID!
  spark: SparkCreateOneWithoutDislikesInput
  campaign: CampaignCreateOneWithoutDislikesInput
}

type DislikeEdge {
  node: Dislike!
  cursor: String!
}

enum DislikeOrderByInput {
  id_ASC
  id_DESC
}

type DislikePreviousValues {
  id: ID!
}

input DislikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [DislikeScalarWhereInput!]
  OR: [DislikeScalarWhereInput!]
  NOT: [DislikeScalarWhereInput!]
}

type DislikeSubscriptionPayload {
  mutation: MutationType!
  node: Dislike
  updatedFields: [String!]
  previousValues: DislikePreviousValues
}

input DislikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DislikeWhereInput
  AND: [DislikeSubscriptionWhereInput!]
}

input DislikeUpdateInput {
  id: ID
  spark: SparkUpdateOneWithoutDislikesInput
  user: UserUpdateOneRequiredWithoutDislikesInput
  campaign: CampaignUpdateOneWithoutDislikesInput
}

input DislikeUpdateManyDataInput {
  id: ID
}

input DislikeUpdateManyMutationInput {
  id: ID
}

input DislikeUpdateManyWithoutCampaignInput {
  create: [DislikeCreateWithoutCampaignInput!]
  delete: [DislikeWhereUniqueInput!]
  connect: [DislikeWhereUniqueInput!]
  set: [DislikeWhereUniqueInput!]
  disconnect: [DislikeWhereUniqueInput!]
  update: [DislikeUpdateWithWhereUniqueWithoutCampaignInput!]
  upsert: [DislikeUpsertWithWhereUniqueWithoutCampaignInput!]
  deleteMany: [DislikeScalarWhereInput!]
  updateMany: [DislikeUpdateManyWithWhereNestedInput!]
}

input DislikeUpdateManyWithoutSparkInput {
  create: [DislikeCreateWithoutSparkInput!]
  delete: [DislikeWhereUniqueInput!]
  connect: [DislikeWhereUniqueInput!]
  set: [DislikeWhereUniqueInput!]
  disconnect: [DislikeWhereUniqueInput!]
  update: [DislikeUpdateWithWhereUniqueWithoutSparkInput!]
  upsert: [DislikeUpsertWithWhereUniqueWithoutSparkInput!]
  deleteMany: [DislikeScalarWhereInput!]
  updateMany: [DislikeUpdateManyWithWhereNestedInput!]
}

input DislikeUpdateManyWithoutUserInput {
  create: [DislikeCreateWithoutUserInput!]
  delete: [DislikeWhereUniqueInput!]
  connect: [DislikeWhereUniqueInput!]
  set: [DislikeWhereUniqueInput!]
  disconnect: [DislikeWhereUniqueInput!]
  update: [DislikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DislikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DislikeScalarWhereInput!]
  updateMany: [DislikeUpdateManyWithWhereNestedInput!]
}

input DislikeUpdateManyWithWhereNestedInput {
  where: DislikeScalarWhereInput!
  data: DislikeUpdateManyDataInput!
}

input DislikeUpdateWithoutCampaignDataInput {
  id: ID
  spark: SparkUpdateOneWithoutDislikesInput
  user: UserUpdateOneRequiredWithoutDislikesInput
}

input DislikeUpdateWithoutSparkDataInput {
  id: ID
  user: UserUpdateOneRequiredWithoutDislikesInput
  campaign: CampaignUpdateOneWithoutDislikesInput
}

input DislikeUpdateWithoutUserDataInput {
  id: ID
  spark: SparkUpdateOneWithoutDislikesInput
  campaign: CampaignUpdateOneWithoutDislikesInput
}

input DislikeUpdateWithWhereUniqueWithoutCampaignInput {
  where: DislikeWhereUniqueInput!
  data: DislikeUpdateWithoutCampaignDataInput!
}

input DislikeUpdateWithWhereUniqueWithoutSparkInput {
  where: DislikeWhereUniqueInput!
  data: DislikeUpdateWithoutSparkDataInput!
}

input DislikeUpdateWithWhereUniqueWithoutUserInput {
  where: DislikeWhereUniqueInput!
  data: DislikeUpdateWithoutUserDataInput!
}

input DislikeUpsertWithWhereUniqueWithoutCampaignInput {
  where: DislikeWhereUniqueInput!
  update: DislikeUpdateWithoutCampaignDataInput!
  create: DislikeCreateWithoutCampaignInput!
}

input DislikeUpsertWithWhereUniqueWithoutSparkInput {
  where: DislikeWhereUniqueInput!
  update: DislikeUpdateWithoutSparkDataInput!
  create: DislikeCreateWithoutSparkInput!
}

input DislikeUpsertWithWhereUniqueWithoutUserInput {
  where: DislikeWhereUniqueInput!
  update: DislikeUpdateWithoutUserDataInput!
  create: DislikeCreateWithoutUserInput!
}

input DislikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  spark: SparkWhereInput
  user: UserWhereInput
  campaign: CampaignWhereInput
  AND: [DislikeWhereInput!]
}

input DislikeWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  spark: Spark
  user: User!
  campaign: Campaign
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID!
  spark: SparkCreateOneWithoutLikesInput
  user: UserCreateOneWithoutLikesInput!
  campaign: CampaignCreateOneWithoutLikesInput
}

input LikeCreateManyWithoutCampaignInput {
  create: [LikeCreateWithoutCampaignInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutSparkInput {
  create: [LikeCreateWithoutSparkInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutCampaignInput {
  id: ID!
  spark: SparkCreateOneWithoutLikesInput
  user: UserCreateOneWithoutLikesInput!
}

input LikeCreateWithoutSparkInput {
  id: ID!
  user: UserCreateOneWithoutLikesInput!
  campaign: CampaignCreateOneWithoutLikesInput
}

input LikeCreateWithoutUserInput {
  id: ID!
  spark: SparkCreateOneWithoutLikesInput
  campaign: CampaignCreateOneWithoutLikesInput
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
}

type LikePreviousValues {
  id: ID!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  id: ID
  spark: SparkUpdateOneWithoutLikesInput
  user: UserUpdateOneRequiredWithoutLikesInput
  campaign: CampaignUpdateOneWithoutLikesInput
}

input LikeUpdateManyDataInput {
  id: ID
}

input LikeUpdateManyMutationInput {
  id: ID
}

input LikeUpdateManyWithoutCampaignInput {
  create: [LikeCreateWithoutCampaignInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutCampaignInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutCampaignInput!]
  deleteMany: [LikeScalarWhereInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
}

input LikeUpdateManyWithoutSparkInput {
  create: [LikeCreateWithoutSparkInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutSparkInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutSparkInput!]
  deleteMany: [LikeScalarWhereInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
}

input LikeUpdateManyWithWhereNestedInput {
  where: LikeScalarWhereInput!
  data: LikeUpdateManyDataInput!
}

input LikeUpdateWithoutCampaignDataInput {
  id: ID
  spark: SparkUpdateOneWithoutLikesInput
  user: UserUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithoutSparkDataInput {
  id: ID
  user: UserUpdateOneRequiredWithoutLikesInput
  campaign: CampaignUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  id: ID
  spark: SparkUpdateOneWithoutLikesInput
  campaign: CampaignUpdateOneWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutCampaignInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutCampaignDataInput!
}

input LikeUpdateWithWhereUniqueWithoutSparkInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutSparkDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutCampaignInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutCampaignDataInput!
  create: LikeCreateWithoutCampaignInput!
}

input LikeUpsertWithWhereUniqueWithoutSparkInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutSparkDataInput!
  create: LikeCreateWithoutSparkInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  spark: SparkWhereInput
  user: UserWhereInput
  campaign: CampaignWhereInput
  AND: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCampaign(data: CampaignCreateInput!): Campaign!
  updateCampaign(data: CampaignUpdateInput!, where: CampaignWhereUniqueInput!): Campaign
  updateManyCampaigns(data: CampaignUpdateManyMutationInput!, where: CampaignWhereInput): BatchPayload!
  upsertCampaign(where: CampaignWhereUniqueInput!, create: CampaignCreateInput!, update: CampaignUpdateInput!): Campaign!
  deleteCampaign(where: CampaignWhereUniqueInput!): Campaign
  deleteManyCampaigns(where: CampaignWhereInput): BatchPayload!
  createDislike(data: DislikeCreateInput!): Dislike!
  updateDislike(data: DislikeUpdateInput!, where: DislikeWhereUniqueInput!): Dislike
  updateManyDislikes(data: DislikeUpdateManyMutationInput!, where: DislikeWhereInput): BatchPayload!
  upsertDislike(where: DislikeWhereUniqueInput!, create: DislikeCreateInput!, update: DislikeUpdateInput!): Dislike!
  deleteDislike(where: DislikeWhereUniqueInput!): Dislike
  deleteManyDislikes(where: DislikeWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  updateManyLikes(data: LikeUpdateManyMutationInput!, where: LikeWhereInput): BatchPayload!
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createSpark(data: SparkCreateInput!): Spark!
  updateSpark(data: SparkUpdateInput!, where: SparkWhereUniqueInput!): Spark
  updateManySparks(data: SparkUpdateManyMutationInput!, where: SparkWhereInput): BatchPayload!
  upsertSpark(where: SparkWhereUniqueInput!, create: SparkCreateInput!, update: SparkUpdateInput!): Spark!
  deleteSpark(where: SparkWhereUniqueInput!): Spark
  deleteManySparks(where: SparkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  campaign(where: CampaignWhereUniqueInput!): Campaign
  campaigns(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campaign]!
  campaignsConnection(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampaignConnection!
  dislike(where: DislikeWhereUniqueInput!): Dislike
  dislikes(where: DislikeWhereInput, orderBy: DislikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dislike]!
  dislikesConnection(where: DislikeWhereInput, orderBy: DislikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DislikeConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  spark(where: SparkWhereUniqueInput!): Spark
  sparks(where: SparkWhereInput, orderBy: SparkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Spark]!
  sparksConnection(where: SparkWhereInput, orderBy: SparkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SparkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Spark {
  id: ID!
  createdAt: DateTime!
  description: String!
  body: String!
  url: String!
  postedBy: User!
  campaign: Campaign
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  dislikes(where: DislikeWhereInput, orderBy: DislikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dislike!]
}

type SparkConnection {
  pageInfo: PageInfo!
  edges: [SparkEdge]!
  aggregate: AggregateSpark!
}

input SparkCreateInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  body: String!
  url: String!
  postedBy: UserCreateOneWithoutSparksInput!
  campaign: CampaignCreateOneWithoutSparksInput
  likes: LikeCreateManyWithoutSparkInput
  dislikes: DislikeCreateManyWithoutSparkInput
}

input SparkCreateManyWithoutCampaignInput {
  create: [SparkCreateWithoutCampaignInput!]
  connect: [SparkWhereUniqueInput!]
}

input SparkCreateManyWithoutPostedByInput {
  create: [SparkCreateWithoutPostedByInput!]
  connect: [SparkWhereUniqueInput!]
}

input SparkCreateOneWithoutDislikesInput {
  create: SparkCreateWithoutDislikesInput
  connect: SparkWhereUniqueInput
}

input SparkCreateOneWithoutLikesInput {
  create: SparkCreateWithoutLikesInput
  connect: SparkWhereUniqueInput
}

input SparkCreateWithoutCampaignInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  body: String!
  url: String!
  postedBy: UserCreateOneWithoutSparksInput!
  likes: LikeCreateManyWithoutSparkInput
  dislikes: DislikeCreateManyWithoutSparkInput
}

input SparkCreateWithoutDislikesInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  body: String!
  url: String!
  postedBy: UserCreateOneWithoutSparksInput!
  campaign: CampaignCreateOneWithoutSparksInput
  likes: LikeCreateManyWithoutSparkInput
}

input SparkCreateWithoutLikesInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  body: String!
  url: String!
  postedBy: UserCreateOneWithoutSparksInput!
  campaign: CampaignCreateOneWithoutSparksInput
  dislikes: DislikeCreateManyWithoutSparkInput
}

input SparkCreateWithoutPostedByInput {
  id: ID!
  createdAt: DateTime!
  description: String!
  body: String!
  url: String!
  campaign: CampaignCreateOneWithoutSparksInput
  likes: LikeCreateManyWithoutSparkInput
  dislikes: DislikeCreateManyWithoutSparkInput
}

type SparkEdge {
  node: Spark!
  cursor: String!
}

enum SparkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  body_ASC
  body_DESC
  url_ASC
  url_DESC
}

type SparkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  body: String!
  url: String!
}

input SparkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [SparkScalarWhereInput!]
  OR: [SparkScalarWhereInput!]
  NOT: [SparkScalarWhereInput!]
}

type SparkSubscriptionPayload {
  mutation: MutationType!
  node: Spark
  updatedFields: [String!]
  previousValues: SparkPreviousValues
}

input SparkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SparkWhereInput
  AND: [SparkSubscriptionWhereInput!]
}

input SparkUpdateInput {
  id: ID
  createdAt: DateTime
  description: String
  body: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutSparksInput
  campaign: CampaignUpdateOneWithoutSparksInput
  likes: LikeUpdateManyWithoutSparkInput
  dislikes: DislikeUpdateManyWithoutSparkInput
}

input SparkUpdateManyDataInput {
  id: ID
  createdAt: DateTime
  description: String
  body: String
  url: String
}

input SparkUpdateManyMutationInput {
  id: ID
  createdAt: DateTime
  description: String
  body: String
  url: String
}

input SparkUpdateManyWithoutCampaignInput {
  create: [SparkCreateWithoutCampaignInput!]
  delete: [SparkWhereUniqueInput!]
  connect: [SparkWhereUniqueInput!]
  set: [SparkWhereUniqueInput!]
  disconnect: [SparkWhereUniqueInput!]
  update: [SparkUpdateWithWhereUniqueWithoutCampaignInput!]
  upsert: [SparkUpsertWithWhereUniqueWithoutCampaignInput!]
  deleteMany: [SparkScalarWhereInput!]
  updateMany: [SparkUpdateManyWithWhereNestedInput!]
}

input SparkUpdateManyWithoutPostedByInput {
  create: [SparkCreateWithoutPostedByInput!]
  delete: [SparkWhereUniqueInput!]
  connect: [SparkWhereUniqueInput!]
  set: [SparkWhereUniqueInput!]
  disconnect: [SparkWhereUniqueInput!]
  update: [SparkUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [SparkUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [SparkScalarWhereInput!]
  updateMany: [SparkUpdateManyWithWhereNestedInput!]
}

input SparkUpdateManyWithWhereNestedInput {
  where: SparkScalarWhereInput!
  data: SparkUpdateManyDataInput!
}

input SparkUpdateOneWithoutDislikesInput {
  create: SparkCreateWithoutDislikesInput
  update: SparkUpdateWithoutDislikesDataInput
  upsert: SparkUpsertWithoutDislikesInput
  delete: Boolean
  disconnect: Boolean
  connect: SparkWhereUniqueInput
}

input SparkUpdateOneWithoutLikesInput {
  create: SparkCreateWithoutLikesInput
  update: SparkUpdateWithoutLikesDataInput
  upsert: SparkUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: SparkWhereUniqueInput
}

input SparkUpdateWithoutCampaignDataInput {
  id: ID
  createdAt: DateTime
  description: String
  body: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutSparksInput
  likes: LikeUpdateManyWithoutSparkInput
  dislikes: DislikeUpdateManyWithoutSparkInput
}

input SparkUpdateWithoutDislikesDataInput {
  id: ID
  createdAt: DateTime
  description: String
  body: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutSparksInput
  campaign: CampaignUpdateOneWithoutSparksInput
  likes: LikeUpdateManyWithoutSparkInput
}

input SparkUpdateWithoutLikesDataInput {
  id: ID
  createdAt: DateTime
  description: String
  body: String
  url: String
  postedBy: UserUpdateOneRequiredWithoutSparksInput
  campaign: CampaignUpdateOneWithoutSparksInput
  dislikes: DislikeUpdateManyWithoutSparkInput
}

input SparkUpdateWithoutPostedByDataInput {
  id: ID
  createdAt: DateTime
  description: String
  body: String
  url: String
  campaign: CampaignUpdateOneWithoutSparksInput
  likes: LikeUpdateManyWithoutSparkInput
  dislikes: DislikeUpdateManyWithoutSparkInput
}

input SparkUpdateWithWhereUniqueWithoutCampaignInput {
  where: SparkWhereUniqueInput!
  data: SparkUpdateWithoutCampaignDataInput!
}

input SparkUpdateWithWhereUniqueWithoutPostedByInput {
  where: SparkWhereUniqueInput!
  data: SparkUpdateWithoutPostedByDataInput!
}

input SparkUpsertWithoutDislikesInput {
  update: SparkUpdateWithoutDislikesDataInput!
  create: SparkCreateWithoutDislikesInput!
}

input SparkUpsertWithoutLikesInput {
  update: SparkUpdateWithoutLikesDataInput!
  create: SparkCreateWithoutLikesInput!
}

input SparkUpsertWithWhereUniqueWithoutCampaignInput {
  where: SparkWhereUniqueInput!
  update: SparkUpdateWithoutCampaignDataInput!
  create: SparkCreateWithoutCampaignInput!
}

input SparkUpsertWithWhereUniqueWithoutPostedByInput {
  where: SparkWhereUniqueInput!
  update: SparkUpdateWithoutPostedByDataInput!
  create: SparkCreateWithoutPostedByInput!
}

input SparkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  postedBy: UserWhereInput
  campaign: CampaignWhereInput
  likes_some: LikeWhereInput
  dislikes_some: DislikeWhereInput
  AND: [SparkWhereInput!]
}

input SparkWhereUniqueInput {
  id: ID
}

type Subscription {
  campaign(where: CampaignSubscriptionWhereInput): CampaignSubscriptionPayload
  dislike(where: DislikeSubscriptionWhereInput): DislikeSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  spark(where: SparkSubscriptionWhereInput): SparkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  secondName: String!
  username: String!
  email: String!
  password: String!
  sparks(where: SparkWhereInput, orderBy: SparkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Spark!]
  campaigns(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campaign!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  dislikes(where: DislikeWhereInput, orderBy: DislikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dislike!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID!
  firstName: String!
  secondName: String!
  username: String!
  email: String!
  password: String!
  sparks: SparkCreateManyWithoutPostedByInput
  campaigns: CampaignCreateManyWithoutPostedByInput
  likes: LikeCreateManyWithoutUserInput
  dislikes: DislikeCreateManyWithoutUserInput
}

input UserCreateOneWithoutCampaignsInput {
  create: UserCreateWithoutCampaignsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDislikesInput {
  create: UserCreateWithoutDislikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSparksInput {
  create: UserCreateWithoutSparksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCampaignsInput {
  id: ID!
  firstName: String!
  secondName: String!
  username: String!
  email: String!
  password: String!
  sparks: SparkCreateManyWithoutPostedByInput
  likes: LikeCreateManyWithoutUserInput
  dislikes: DislikeCreateManyWithoutUserInput
}

input UserCreateWithoutDislikesInput {
  id: ID!
  firstName: String!
  secondName: String!
  username: String!
  email: String!
  password: String!
  sparks: SparkCreateManyWithoutPostedByInput
  campaigns: CampaignCreateManyWithoutPostedByInput
  likes: LikeCreateManyWithoutUserInput
}

input UserCreateWithoutLikesInput {
  id: ID!
  firstName: String!
  secondName: String!
  username: String!
  email: String!
  password: String!
  sparks: SparkCreateManyWithoutPostedByInput
  campaigns: CampaignCreateManyWithoutPostedByInput
  dislikes: DislikeCreateManyWithoutUserInput
}

input UserCreateWithoutSparksInput {
  id: ID!
  firstName: String!
  secondName: String!
  username: String!
  email: String!
  password: String!
  campaigns: CampaignCreateManyWithoutPostedByInput
  likes: LikeCreateManyWithoutUserInput
  dislikes: DislikeCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  secondName_ASC
  secondName_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  secondName: String!
  username: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  id: ID
  firstName: String
  secondName: String
  username: String
  email: String
  password: String
  sparks: SparkUpdateManyWithoutPostedByInput
  campaigns: CampaignUpdateManyWithoutPostedByInput
  likes: LikeUpdateManyWithoutUserInput
  dislikes: DislikeUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  id: ID
  firstName: String
  secondName: String
  username: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutCampaignsInput {
  create: UserCreateWithoutCampaignsInput
  update: UserUpdateWithoutCampaignsDataInput
  upsert: UserUpsertWithoutCampaignsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutDislikesInput {
  create: UserCreateWithoutDislikesInput
  update: UserUpdateWithoutDislikesDataInput
  upsert: UserUpsertWithoutDislikesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSparksInput {
  create: UserCreateWithoutSparksInput
  update: UserUpdateWithoutSparksDataInput
  upsert: UserUpsertWithoutSparksInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCampaignsDataInput {
  id: ID
  firstName: String
  secondName: String
  username: String
  email: String
  password: String
  sparks: SparkUpdateManyWithoutPostedByInput
  likes: LikeUpdateManyWithoutUserInput
  dislikes: DislikeUpdateManyWithoutUserInput
}

input UserUpdateWithoutDislikesDataInput {
  id: ID
  firstName: String
  secondName: String
  username: String
  email: String
  password: String
  sparks: SparkUpdateManyWithoutPostedByInput
  campaigns: CampaignUpdateManyWithoutPostedByInput
  likes: LikeUpdateManyWithoutUserInput
}

input UserUpdateWithoutLikesDataInput {
  id: ID
  firstName: String
  secondName: String
  username: String
  email: String
  password: String
  sparks: SparkUpdateManyWithoutPostedByInput
  campaigns: CampaignUpdateManyWithoutPostedByInput
  dislikes: DislikeUpdateManyWithoutUserInput
}

input UserUpdateWithoutSparksDataInput {
  id: ID
  firstName: String
  secondName: String
  username: String
  email: String
  password: String
  campaigns: CampaignUpdateManyWithoutPostedByInput
  likes: LikeUpdateManyWithoutUserInput
  dislikes: DislikeUpdateManyWithoutUserInput
}

input UserUpsertWithoutCampaignsInput {
  update: UserUpdateWithoutCampaignsDataInput!
  create: UserCreateWithoutCampaignsInput!
}

input UserUpsertWithoutDislikesInput {
  update: UserUpdateWithoutDislikesDataInput!
  create: UserCreateWithoutDislikesInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutSparksInput {
  update: UserUpdateWithoutSparksDataInput!
  create: UserCreateWithoutSparksInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  secondName: String
  secondName_not: String
  secondName_in: [String!]
  secondName_not_in: [String!]
  secondName_lt: String
  secondName_lte: String
  secondName_gt: String
  secondName_gte: String
  secondName_contains: String
  secondName_not_contains: String
  secondName_starts_with: String
  secondName_not_starts_with: String
  secondName_ends_with: String
  secondName_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  sparks_some: SparkWhereInput
  campaigns_some: CampaignWhereInput
  likes_some: LikeWhereInput
  dislikes_some: DislikeWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`