// Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  campaign: (where?: CampaignWhereInput) => Promise<boolean>;
  dislike: (where?: DislikeWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  spark: (where?: SparkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  campaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  campaigns: (
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Campaign>;
  campaignsConnection: (
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CampaignConnectionPromise;
  dislike: (where: DislikeWhereUniqueInput) => DislikePromise;
  dislikes: (
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Dislike>;
  dislikesConnection: (
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DislikeConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikePromise;
  likes: (
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Like>;
  likesConnection: (
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LikeConnectionPromise;
  spark: (where: SparkWhereUniqueInput) => SparkPromise;
  sparks: (
    args?: {
      where?: SparkWhereInput;
      orderBy?: SparkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Spark>;
  sparksConnection: (
    args?: {
      where?: SparkWhereInput;
      orderBy?: SparkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SparkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCampaign: (data: CampaignCreateInput) => CampaignPromise;
  updateCampaign: (
    args: { data: CampaignUpdateInput; where: CampaignWhereUniqueInput }
  ) => CampaignPromise;
  updateManyCampaigns: (
    args: { data: CampaignUpdateManyMutationInput; where?: CampaignWhereInput }
  ) => BatchPayloadPromise;
  upsertCampaign: (
    args: {
      where: CampaignWhereUniqueInput;
      create: CampaignCreateInput;
      update: CampaignUpdateInput;
    }
  ) => CampaignPromise;
  deleteCampaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  deleteManyCampaigns: (where?: CampaignWhereInput) => BatchPayloadPromise;
  createDislike: (data: DislikeCreateInput) => DislikePromise;
  updateDislike: (
    args: { data: DislikeUpdateInput; where: DislikeWhereUniqueInput }
  ) => DislikePromise;
  updateManyDislikes: (
    args: { data: DislikeUpdateManyMutationInput; where?: DislikeWhereInput }
  ) => BatchPayloadPromise;
  upsertDislike: (
    args: {
      where: DislikeWhereUniqueInput;
      create: DislikeCreateInput;
      update: DislikeUpdateInput;
    }
  ) => DislikePromise;
  deleteDislike: (where: DislikeWhereUniqueInput) => DislikePromise;
  deleteManyDislikes: (where?: DislikeWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (
    args: { data: LikeUpdateInput; where: LikeWhereUniqueInput }
  ) => LikePromise;
  updateManyLikes: (
    args: { data: LikeUpdateManyMutationInput; where?: LikeWhereInput }
  ) => BatchPayloadPromise;
  upsertLike: (
    args: {
      where: LikeWhereUniqueInput;
      create: LikeCreateInput;
      update: LikeUpdateInput;
    }
  ) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createSpark: (data: SparkCreateInput) => SparkPromise;
  updateSpark: (
    args: { data: SparkUpdateInput; where: SparkWhereUniqueInput }
  ) => SparkPromise;
  updateManySparks: (
    args: { data: SparkUpdateManyMutationInput; where?: SparkWhereInput }
  ) => BatchPayloadPromise;
  upsertSpark: (
    args: {
      where: SparkWhereUniqueInput;
      create: SparkCreateInput;
      update: SparkUpdateInput;
    }
  ) => SparkPromise;
  deleteSpark: (where: SparkWhereUniqueInput) => SparkPromise;
  deleteManySparks: (where?: SparkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  campaign: (
    where?: CampaignSubscriptionWhereInput
  ) => CampaignSubscriptionPayloadSubscription;
  dislike: (
    where?: DislikeSubscriptionWhereInput
  ) => DislikeSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  spark: (
    where?: SparkSubscriptionWhereInput
  ) => SparkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SparkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "body_ASC"
  | "body_DESC"
  | "url_ASC"
  | "url_DESC";

export type LikeOrderByInput = "id_ASC" | "id_DESC";

export type DislikeOrderByInput = "id_ASC" | "id_DESC";

export type CampaignOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "secondName_ASC"
  | "secondName_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithoutSparksDataInput {
  id?: ID_Input;
  firstName?: String;
  secondName?: String;
  username?: String;
  email?: String;
  password?: String;
  campaigns?: CampaignUpdateManyWithoutPostedByInput;
  likes?: LikeUpdateManyWithoutUserInput;
  dislikes?: DislikeUpdateManyWithoutUserInput;
}

export type CampaignWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SparkUpdateManyWithoutCampaignInput {
  create?: SparkCreateWithoutCampaignInput[] | SparkCreateWithoutCampaignInput;
  delete?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  connect?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  set?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  disconnect?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  update?:
    | SparkUpdateWithWhereUniqueWithoutCampaignInput[]
    | SparkUpdateWithWhereUniqueWithoutCampaignInput;
  upsert?:
    | SparkUpsertWithWhereUniqueWithoutCampaignInput[]
    | SparkUpsertWithWhereUniqueWithoutCampaignInput;
  deleteMany?: SparkScalarWhereInput[] | SparkScalarWhereInput;
  updateMany?:
    | SparkUpdateManyWithWhereNestedInput[]
    | SparkUpdateManyWithWhereNestedInput;
}

export interface CampaignWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  postedBy?: UserWhereInput;
  sparks_some?: SparkWhereInput;
  likes_some?: LikeWhereInput;
  dislikes_some?: DislikeWhereInput;
  AND?: CampaignWhereInput[] | CampaignWhereInput;
}

export interface SparkUpdateWithWhereUniqueWithoutCampaignInput {
  where: SparkWhereUniqueInput;
  data: SparkUpdateWithoutCampaignDataInput;
}

export interface DislikeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  spark?: SparkWhereInput;
  user?: UserWhereInput;
  campaign?: CampaignWhereInput;
  AND?: DislikeWhereInput[] | DislikeWhereInput;
}

export interface UserUpdateWithoutCampaignsDataInput {
  id?: ID_Input;
  firstName?: String;
  secondName?: String;
  username?: String;
  email?: String;
  password?: String;
  sparks?: SparkUpdateManyWithoutPostedByInput;
  likes?: LikeUpdateManyWithoutUserInput;
  dislikes?: DislikeUpdateManyWithoutUserInput;
}

export interface CampaignUpdateManyDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  url?: String;
}

export interface SparkUpdateManyWithoutPostedByInput {
  create?: SparkCreateWithoutPostedByInput[] | SparkCreateWithoutPostedByInput;
  delete?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  connect?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  set?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  disconnect?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
  update?:
    | SparkUpdateWithWhereUniqueWithoutPostedByInput[]
    | SparkUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | SparkUpsertWithWhereUniqueWithoutPostedByInput[]
    | SparkUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: SparkScalarWhereInput[] | SparkScalarWhereInput;
  updateMany?:
    | SparkUpdateManyWithWhereNestedInput[]
    | SparkUpdateManyWithWhereNestedInput;
}

export interface SparkUpdateWithoutCampaignDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  body?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutSparksInput;
  likes?: LikeUpdateManyWithoutSparkInput;
  dislikes?: DislikeUpdateManyWithoutSparkInput;
}

export interface SparkUpdateWithWhereUniqueWithoutPostedByInput {
  where: SparkWhereUniqueInput;
  data: SparkUpdateWithoutPostedByDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface SparkUpdateWithoutPostedByDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  body?: String;
  url?: String;
  campaign?: CampaignUpdateOneWithoutSparksInput;
  likes?: LikeUpdateManyWithoutSparkInput;
  dislikes?: DislikeUpdateManyWithoutSparkInput;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LikeWhereInput;
  AND?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
}

export interface CampaignUpdateOneWithoutSparksInput {
  create?: CampaignCreateWithoutSparksInput;
  update?: CampaignUpdateWithoutSparksDataInput;
  upsert?: CampaignUpsertWithoutSparksInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CampaignWhereUniqueInput;
}

export interface CampaignSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CampaignWhereInput;
  AND?: CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput;
}

export interface CampaignUpdateWithoutSparksDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutCampaignsInput;
  likes?: LikeUpdateManyWithoutCampaignInput;
  dislikes?: DislikeUpdateManyWithoutCampaignInput;
}

export interface UserUpdateInput {
  id?: ID_Input;
  firstName?: String;
  secondName?: String;
  username?: String;
  email?: String;
  password?: String;
  sparks?: SparkUpdateManyWithoutPostedByInput;
  campaigns?: CampaignUpdateManyWithoutPostedByInput;
  likes?: LikeUpdateManyWithoutUserInput;
  dislikes?: DislikeUpdateManyWithoutUserInput;
}

export interface LikeUpdateManyWithoutCampaignInput {
  create?: LikeCreateWithoutCampaignInput[] | LikeCreateWithoutCampaignInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  set?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutCampaignInput[]
    | LikeUpdateWithWhereUniqueWithoutCampaignInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutCampaignInput[]
    | LikeUpsertWithWhereUniqueWithoutCampaignInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  updateMany?:
    | LikeUpdateManyWithWhereNestedInput[]
    | LikeUpdateManyWithWhereNestedInput;
}

export interface SparkUpdateManyMutationInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  body?: String;
  url?: String;
}

export interface LikeUpdateWithWhereUniqueWithoutCampaignInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutCampaignDataInput;
}

export interface SparkUpdateInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  body?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutSparksInput;
  campaign?: CampaignUpdateOneWithoutSparksInput;
  likes?: LikeUpdateManyWithoutSparkInput;
  dislikes?: DislikeUpdateManyWithoutSparkInput;
}

export interface LikeUpdateWithoutCampaignDataInput {
  id?: ID_Input;
  spark?: SparkUpdateOneWithoutLikesInput;
  user?: UserUpdateOneRequiredWithoutLikesInput;
}

export interface LikeUpdateManyMutationInput {
  id?: ID_Input;
}

export interface SparkUpdateOneWithoutLikesInput {
  create?: SparkCreateWithoutLikesInput;
  update?: SparkUpdateWithoutLikesDataInput;
  upsert?: SparkUpsertWithoutLikesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SparkWhereUniqueInput;
}

export interface LikeUpdateInput {
  id?: ID_Input;
  spark?: SparkUpdateOneWithoutLikesInput;
  user?: UserUpdateOneRequiredWithoutLikesInput;
  campaign?: CampaignUpdateOneWithoutLikesInput;
}

export interface SparkUpdateWithoutLikesDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  body?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutSparksInput;
  campaign?: CampaignUpdateOneWithoutSparksInput;
  dislikes?: DislikeUpdateManyWithoutSparkInput;
}

export interface DislikeUpdateManyMutationInput {
  id?: ID_Input;
}

export interface UserUpdateOneRequiredWithoutSparksInput {
  create?: UserCreateWithoutSparksInput;
  update?: UserUpdateWithoutSparksDataInput;
  upsert?: UserUpsertWithoutSparksInput;
  connect?: UserWhereUniqueInput;
}

export interface DislikeUpdateInput {
  id?: ID_Input;
  spark?: SparkUpdateOneWithoutDislikesInput;
  user?: UserUpdateOneRequiredWithoutDislikesInput;
  campaign?: CampaignUpdateOneWithoutDislikesInput;
}

export interface SparkUpsertWithoutLikesInput {
  update: SparkUpdateWithoutLikesDataInput;
  create: SparkCreateWithoutLikesInput;
}

export interface CampaignUpdateManyMutationInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  url?: String;
}

export interface CampaignUpdateManyWithoutPostedByInput {
  create?:
    | CampaignCreateWithoutPostedByInput[]
    | CampaignCreateWithoutPostedByInput;
  delete?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  set?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  disconnect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
  update?:
    | CampaignUpdateWithWhereUniqueWithoutPostedByInput[]
    | CampaignUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | CampaignUpsertWithWhereUniqueWithoutPostedByInput[]
    | CampaignUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  updateMany?:
    | CampaignUpdateManyWithWhereNestedInput[]
    | CampaignUpdateManyWithWhereNestedInput;
}

export interface UserUpsertWithoutCampaignsInput {
  update: UserUpdateWithoutCampaignsDataInput;
  create: UserCreateWithoutCampaignsInput;
}

export interface CampaignUpdateWithWhereUniqueWithoutPostedByInput {
  where: CampaignWhereUniqueInput;
  data: CampaignUpdateWithoutPostedByDataInput;
}

export interface CampaignUpsertWithoutSparksInput {
  update: CampaignUpdateWithoutSparksDataInput;
  create: CampaignCreateWithoutSparksInput;
}

export interface CampaignUpdateWithoutPostedByDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  url?: String;
  sparks?: SparkUpdateManyWithoutCampaignInput;
  likes?: LikeUpdateManyWithoutCampaignInput;
  dislikes?: DislikeUpdateManyWithoutCampaignInput;
}

export interface UserCreateOneWithoutCampaignsInput {
  create?: UserCreateWithoutCampaignsInput;
  connect?: UserWhereUniqueInput;
}

export interface LikeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  spark?: SparkWhereInput;
  user?: UserWhereInput;
  campaign?: CampaignWhereInput;
  AND?: LikeWhereInput[] | LikeWhereInput;
}

export interface SparkCreateManyWithoutPostedByInput {
  create?: SparkCreateWithoutPostedByInput[] | SparkCreateWithoutPostedByInput;
  connect?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  secondName?: String;
  secondName_not?: String;
  secondName_in?: String[] | String;
  secondName_not_in?: String[] | String;
  secondName_lt?: String;
  secondName_lte?: String;
  secondName_gt?: String;
  secondName_gte?: String;
  secondName_contains?: String;
  secondName_not_contains?: String;
  secondName_starts_with?: String;
  secondName_not_starts_with?: String;
  secondName_ends_with?: String;
  secondName_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  sparks_some?: SparkWhereInput;
  campaigns_some?: CampaignWhereInput;
  likes_some?: LikeWhereInput;
  dislikes_some?: DislikeWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
}

export interface CampaignCreateOneWithoutSparksInput {
  create?: CampaignCreateWithoutSparksInput;
  connect?: CampaignWhereUniqueInput;
}

export interface UserUpsertWithoutSparksInput {
  update: UserUpdateWithoutSparksDataInput;
  create: UserCreateWithoutSparksInput;
}

export interface LikeCreateManyWithoutCampaignInput {
  create?: LikeCreateWithoutCampaignInput[] | LikeCreateWithoutCampaignInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface LikeUpdateManyWithoutSparkInput {
  create?: LikeCreateWithoutSparkInput[] | LikeCreateWithoutSparkInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  set?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutSparkInput[]
    | LikeUpdateWithWhereUniqueWithoutSparkInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutSparkInput[]
    | LikeUpsertWithWhereUniqueWithoutSparkInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  updateMany?:
    | LikeUpdateManyWithWhereNestedInput[]
    | LikeUpdateManyWithWhereNestedInput;
}

export interface SparkCreateOneWithoutLikesInput {
  create?: SparkCreateWithoutLikesInput;
  connect?: SparkWhereUniqueInput;
}

export interface LikeUpdateWithWhereUniqueWithoutSparkInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutSparkDataInput;
}

export interface UserCreateOneWithoutSparksInput {
  create?: UserCreateWithoutSparksInput;
  connect?: UserWhereUniqueInput;
}

export interface LikeUpdateWithoutSparkDataInput {
  id?: ID_Input;
  user?: UserUpdateOneRequiredWithoutLikesInput;
  campaign?: CampaignUpdateOneWithoutLikesInput;
}

export interface CampaignCreateManyWithoutPostedByInput {
  create?:
    | CampaignCreateWithoutPostedByInput[]
    | CampaignCreateWithoutPostedByInput;
  connect?: CampaignWhereUniqueInput[] | CampaignWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutLikesInput {
  create?: UserCreateWithoutLikesInput;
  update?: UserUpdateWithoutLikesDataInput;
  upsert?: UserUpsertWithoutLikesInput;
  connect?: UserWhereUniqueInput;
}

export interface SparkCreateManyWithoutCampaignInput {
  create?: SparkCreateWithoutCampaignInput[] | SparkCreateWithoutCampaignInput;
  connect?: SparkWhereUniqueInput[] | SparkWhereUniqueInput;
}

export interface UserUpdateWithoutLikesDataInput {
  id?: ID_Input;
  firstName?: String;
  secondName?: String;
  username?: String;
  email?: String;
  password?: String;
  sparks?: SparkUpdateManyWithoutPostedByInput;
  campaigns?: CampaignUpdateManyWithoutPostedByInput;
  dislikes?: DislikeUpdateManyWithoutUserInput;
}

export interface LikeCreateManyWithoutSparkInput {
  create?: LikeCreateWithoutSparkInput[] | LikeCreateWithoutSparkInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface DislikeUpdateManyWithoutUserInput {
  create?: DislikeCreateWithoutUserInput[] | DislikeCreateWithoutUserInput;
  delete?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  connect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  set?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  disconnect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  update?:
    | DislikeUpdateWithWhereUniqueWithoutUserInput[]
    | DislikeUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | DislikeUpsertWithWhereUniqueWithoutUserInput[]
    | DislikeUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: DislikeScalarWhereInput[] | DislikeScalarWhereInput;
  updateMany?:
    | DislikeUpdateManyWithWhereNestedInput[]
    | DislikeUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutLikesInput {
  create?: UserCreateWithoutLikesInput;
  connect?: UserWhereUniqueInput;
}

export interface DislikeUpdateWithWhereUniqueWithoutUserInput {
  where: DislikeWhereUniqueInput;
  data: DislikeUpdateWithoutUserDataInput;
}

export interface DislikeCreateManyWithoutUserInput {
  create?: DislikeCreateWithoutUserInput[] | DislikeCreateWithoutUserInput;
  connect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
}

export interface DislikeUpdateWithoutUserDataInput {
  id?: ID_Input;
  spark?: SparkUpdateOneWithoutDislikesInput;
  campaign?: CampaignUpdateOneWithoutDislikesInput;
}

export interface SparkCreateOneWithoutDislikesInput {
  create?: SparkCreateWithoutDislikesInput;
  connect?: SparkWhereUniqueInput;
}

export interface SparkUpdateOneWithoutDislikesInput {
  create?: SparkCreateWithoutDislikesInput;
  update?: SparkUpdateWithoutDislikesDataInput;
  upsert?: SparkUpsertWithoutDislikesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SparkWhereUniqueInput;
}

export interface CampaignCreateOneWithoutDislikesInput {
  create?: CampaignCreateWithoutDislikesInput;
  connect?: CampaignWhereUniqueInput;
}

export interface SparkUpdateWithoutDislikesDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  body?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutSparksInput;
  campaign?: CampaignUpdateOneWithoutSparksInput;
  likes?: LikeUpdateManyWithoutSparkInput;
}

export interface CampaignCreateOneWithoutLikesInput {
  create?: CampaignCreateWithoutLikesInput;
  connect?: CampaignWhereUniqueInput;
}

export interface SparkUpsertWithoutDislikesInput {
  update: SparkUpdateWithoutDislikesDataInput;
  create: SparkCreateWithoutDislikesInput;
}

export interface DislikeCreateManyWithoutCampaignInput {
  create?:
    | DislikeCreateWithoutCampaignInput[]
    | DislikeCreateWithoutCampaignInput;
  connect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
}

export interface CampaignUpdateOneWithoutDislikesInput {
  create?: CampaignCreateWithoutDislikesInput;
  update?: CampaignUpdateWithoutDislikesDataInput;
  upsert?: CampaignUpsertWithoutDislikesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CampaignWhereUniqueInput;
}

export interface UserCreateOneWithoutDislikesInput {
  create?: UserCreateWithoutDislikesInput;
  connect?: UserWhereUniqueInput;
}

export interface CampaignUpdateWithoutDislikesDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutCampaignsInput;
  sparks?: SparkUpdateManyWithoutCampaignInput;
  likes?: LikeUpdateManyWithoutCampaignInput;
}

export interface LikeCreateManyWithoutUserInput {
  create?: LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface CampaignUpsertWithoutDislikesInput {
  update: CampaignUpdateWithoutDislikesDataInput;
  create: CampaignCreateWithoutDislikesInput;
}

export interface DislikeCreateManyWithoutSparkInput {
  create?: DislikeCreateWithoutSparkInput[] | DislikeCreateWithoutSparkInput;
  connect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
}

export interface DislikeUpsertWithWhereUniqueWithoutUserInput {
  where: DislikeWhereUniqueInput;
  update: DislikeUpdateWithoutUserDataInput;
  create: DislikeCreateWithoutUserInput;
}

export interface CampaignUpdateInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutCampaignsInput;
  sparks?: SparkUpdateManyWithoutCampaignInput;
  likes?: LikeUpdateManyWithoutCampaignInput;
  dislikes?: DislikeUpdateManyWithoutCampaignInput;
}

export interface DislikeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: DislikeScalarWhereInput[] | DislikeScalarWhereInput;
  OR?: DislikeScalarWhereInput[] | DislikeScalarWhereInput;
  NOT?: DislikeScalarWhereInput[] | DislikeScalarWhereInput;
}

export interface SparkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  postedBy?: UserWhereInput;
  campaign?: CampaignWhereInput;
  likes_some?: LikeWhereInput;
  dislikes_some?: DislikeWhereInput;
  AND?: SparkWhereInput[] | SparkWhereInput;
}

export interface DislikeUpdateManyWithWhereNestedInput {
  where: DislikeScalarWhereInput;
  data: DislikeUpdateManyDataInput;
}

export interface DislikeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DislikeWhereInput;
  AND?: DislikeSubscriptionWhereInput[] | DislikeSubscriptionWhereInput;
}

export interface DislikeUpdateManyDataInput {
  id?: ID_Input;
}

export interface UserCreateInput {
  id: ID_Input;
  firstName: String;
  secondName: String;
  username: String;
  email: String;
  password: String;
  sparks?: SparkCreateManyWithoutPostedByInput;
  campaigns?: CampaignCreateManyWithoutPostedByInput;
  likes?: LikeCreateManyWithoutUserInput;
  dislikes?: DislikeCreateManyWithoutUserInput;
}

export interface UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput;
  create: UserCreateWithoutLikesInput;
}

export interface SparkCreateInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  body: String;
  url: String;
  postedBy: UserCreateOneWithoutSparksInput;
  campaign?: CampaignCreateOneWithoutSparksInput;
  likes?: LikeCreateManyWithoutSparkInput;
  dislikes?: DislikeCreateManyWithoutSparkInput;
}

export interface CampaignUpdateOneWithoutLikesInput {
  create?: CampaignCreateWithoutLikesInput;
  update?: CampaignUpdateWithoutLikesDataInput;
  upsert?: CampaignUpsertWithoutLikesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CampaignWhereUniqueInput;
}

export interface LikeCreateInput {
  id: ID_Input;
  spark?: SparkCreateOneWithoutLikesInput;
  user: UserCreateOneWithoutLikesInput;
  campaign?: CampaignCreateOneWithoutLikesInput;
}

export interface CampaignUpdateWithoutLikesDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  url?: String;
  postedBy?: UserUpdateOneRequiredWithoutCampaignsInput;
  sparks?: SparkUpdateManyWithoutCampaignInput;
  dislikes?: DislikeUpdateManyWithoutCampaignInput;
}

export interface DislikeCreateInput {
  id: ID_Input;
  spark?: SparkCreateOneWithoutDislikesInput;
  user: UserCreateOneWithoutDislikesInput;
  campaign?: CampaignCreateOneWithoutDislikesInput;
}

export interface DislikeUpdateManyWithoutCampaignInput {
  create?:
    | DislikeCreateWithoutCampaignInput[]
    | DislikeCreateWithoutCampaignInput;
  delete?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  connect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  set?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  disconnect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  update?:
    | DislikeUpdateWithWhereUniqueWithoutCampaignInput[]
    | DislikeUpdateWithWhereUniqueWithoutCampaignInput;
  upsert?:
    | DislikeUpsertWithWhereUniqueWithoutCampaignInput[]
    | DislikeUpsertWithWhereUniqueWithoutCampaignInput;
  deleteMany?: DislikeScalarWhereInput[] | DislikeScalarWhereInput;
  updateMany?:
    | DislikeUpdateManyWithWhereNestedInput[]
    | DislikeUpdateManyWithWhereNestedInput;
}

export interface SparkUpsertWithWhereUniqueWithoutPostedByInput {
  where: SparkWhereUniqueInput;
  update: SparkUpdateWithoutPostedByDataInput;
  create: SparkCreateWithoutPostedByInput;
}

export interface DislikeUpdateWithWhereUniqueWithoutCampaignInput {
  where: DislikeWhereUniqueInput;
  data: DislikeUpdateWithoutCampaignDataInput;
}

export interface CampaignCreateInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  url: String;
  postedBy: UserCreateOneWithoutCampaignsInput;
  sparks?: SparkCreateManyWithoutCampaignInput;
  likes?: LikeCreateManyWithoutCampaignInput;
  dislikes?: DislikeCreateManyWithoutCampaignInput;
}

export interface DislikeUpdateWithoutCampaignDataInput {
  id?: ID_Input;
  spark?: SparkUpdateOneWithoutDislikesInput;
  user?: UserUpdateOneRequiredWithoutDislikesInput;
}

export interface SparkCreateWithoutPostedByInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  body: String;
  url: String;
  campaign?: CampaignCreateOneWithoutSparksInput;
  likes?: LikeCreateManyWithoutSparkInput;
  dislikes?: DislikeCreateManyWithoutSparkInput;
}

export interface UserUpdateOneRequiredWithoutDislikesInput {
  create?: UserCreateWithoutDislikesInput;
  update?: UserUpdateWithoutDislikesDataInput;
  upsert?: UserUpsertWithoutDislikesInput;
  connect?: UserWhereUniqueInput;
}

export interface LikeCreateWithoutCampaignInput {
  id: ID_Input;
  spark?: SparkCreateOneWithoutLikesInput;
  user: UserCreateOneWithoutLikesInput;
}

export interface UserUpdateWithoutDislikesDataInput {
  id?: ID_Input;
  firstName?: String;
  secondName?: String;
  username?: String;
  email?: String;
  password?: String;
  sparks?: SparkUpdateManyWithoutPostedByInput;
  campaigns?: CampaignUpdateManyWithoutPostedByInput;
  likes?: LikeUpdateManyWithoutUserInput;
}

export interface UserCreateWithoutSparksInput {
  id: ID_Input;
  firstName: String;
  secondName: String;
  username: String;
  email: String;
  password: String;
  campaigns?: CampaignCreateManyWithoutPostedByInput;
  likes?: LikeCreateManyWithoutUserInput;
  dislikes?: DislikeCreateManyWithoutUserInput;
}

export interface LikeUpdateManyWithoutUserInput {
  create?: LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  set?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutUserInput[]
    | LikeUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutUserInput[]
    | LikeUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  updateMany?:
    | LikeUpdateManyWithWhereNestedInput[]
    | LikeUpdateManyWithWhereNestedInput;
}

export interface SparkCreateWithoutCampaignInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  body: String;
  url: String;
  postedBy: UserCreateOneWithoutSparksInput;
  likes?: LikeCreateManyWithoutSparkInput;
  dislikes?: DislikeCreateManyWithoutSparkInput;
}

export interface LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutUserDataInput;
}

export interface UserCreateWithoutLikesInput {
  id: ID_Input;
  firstName: String;
  secondName: String;
  username: String;
  email: String;
  password: String;
  sparks?: SparkCreateManyWithoutPostedByInput;
  campaigns?: CampaignCreateManyWithoutPostedByInput;
  dislikes?: DislikeCreateManyWithoutUserInput;
}

export interface LikeUpdateWithoutUserDataInput {
  id?: ID_Input;
  spark?: SparkUpdateOneWithoutLikesInput;
  campaign?: CampaignUpdateOneWithoutLikesInput;
}

export interface SparkCreateWithoutDislikesInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  body: String;
  url: String;
  postedBy: UserCreateOneWithoutSparksInput;
  campaign?: CampaignCreateOneWithoutSparksInput;
  likes?: LikeCreateManyWithoutSparkInput;
}

export interface LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutUserDataInput;
  create: LikeCreateWithoutUserInput;
}

export interface CampaignCreateWithoutLikesInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  url: String;
  postedBy: UserCreateOneWithoutCampaignsInput;
  sparks?: SparkCreateManyWithoutCampaignInput;
  dislikes?: DislikeCreateManyWithoutCampaignInput;
}

export interface LikeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  OR?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  NOT?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface UserCreateWithoutDislikesInput {
  id: ID_Input;
  firstName: String;
  secondName: String;
  username: String;
  email: String;
  password: String;
  sparks?: SparkCreateManyWithoutPostedByInput;
  campaigns?: CampaignCreateManyWithoutPostedByInput;
  likes?: LikeCreateManyWithoutUserInput;
}

export interface LikeUpdateManyWithWhereNestedInput {
  where: LikeScalarWhereInput;
  data: LikeUpdateManyDataInput;
}

export interface DislikeCreateWithoutSparkInput {
  id: ID_Input;
  user: UserCreateOneWithoutDislikesInput;
  campaign?: CampaignCreateOneWithoutDislikesInput;
}

export interface LikeUpdateManyDataInput {
  id?: ID_Input;
}

export interface SparkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SparkWhereInput;
  AND?: SparkSubscriptionWhereInput[] | SparkSubscriptionWhereInput;
}

export interface UserUpsertWithoutDislikesInput {
  update: UserUpdateWithoutDislikesDataInput;
  create: UserCreateWithoutDislikesInput;
}

export type DislikeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DislikeUpsertWithWhereUniqueWithoutCampaignInput {
  where: DislikeWhereUniqueInput;
  update: DislikeUpdateWithoutCampaignDataInput;
  create: DislikeCreateWithoutCampaignInput;
}

export type SparkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CampaignUpsertWithoutLikesInput {
  update: CampaignUpdateWithoutLikesDataInput;
  create: CampaignCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutCampaignInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutCampaignDataInput;
  create: LikeCreateWithoutCampaignInput;
}

export interface LikeUpsertWithWhereUniqueWithoutSparkInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutSparkDataInput;
  create: LikeCreateWithoutSparkInput;
}

export interface CampaignCreateWithoutSparksInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  url: String;
  postedBy: UserCreateOneWithoutCampaignsInput;
  likes?: LikeCreateManyWithoutCampaignInput;
  dislikes?: DislikeCreateManyWithoutCampaignInput;
}

export interface DislikeUpdateManyWithoutSparkInput {
  create?: DislikeCreateWithoutSparkInput[] | DislikeCreateWithoutSparkInput;
  delete?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  connect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  set?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  disconnect?: DislikeWhereUniqueInput[] | DislikeWhereUniqueInput;
  update?:
    | DislikeUpdateWithWhereUniqueWithoutSparkInput[]
    | DislikeUpdateWithWhereUniqueWithoutSparkInput;
  upsert?:
    | DislikeUpsertWithWhereUniqueWithoutSparkInput[]
    | DislikeUpsertWithWhereUniqueWithoutSparkInput;
  deleteMany?: DislikeScalarWhereInput[] | DislikeScalarWhereInput;
  updateMany?:
    | DislikeUpdateManyWithWhereNestedInput[]
    | DislikeUpdateManyWithWhereNestedInput;
}

export interface CampaignCreateWithoutPostedByInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  url: String;
  sparks?: SparkCreateManyWithoutCampaignInput;
  likes?: LikeCreateManyWithoutCampaignInput;
  dislikes?: DislikeCreateManyWithoutCampaignInput;
}

export interface DislikeUpdateWithWhereUniqueWithoutSparkInput {
  where: DislikeWhereUniqueInput;
  data: DislikeUpdateWithoutSparkDataInput;
}

export interface DislikeCreateWithoutUserInput {
  id: ID_Input;
  spark?: SparkCreateOneWithoutDislikesInput;
  campaign?: CampaignCreateOneWithoutDislikesInput;
}

export interface DislikeUpdateWithoutSparkDataInput {
  id?: ID_Input;
  user?: UserUpdateOneRequiredWithoutDislikesInput;
  campaign?: CampaignUpdateOneWithoutDislikesInput;
}

export interface DislikeCreateWithoutCampaignInput {
  id: ID_Input;
  spark?: SparkCreateOneWithoutDislikesInput;
  user: UserCreateOneWithoutDislikesInput;
}

export interface DislikeUpsertWithWhereUniqueWithoutSparkInput {
  where: DislikeWhereUniqueInput;
  update: DislikeUpdateWithoutSparkDataInput;
  create: DislikeCreateWithoutSparkInput;
}

export interface UserUpdateOneRequiredWithoutCampaignsInput {
  create?: UserCreateWithoutCampaignsInput;
  update?: UserUpdateWithoutCampaignsDataInput;
  upsert?: UserUpsertWithoutCampaignsInput;
  connect?: UserWhereUniqueInput;
}

export interface SparkUpsertWithWhereUniqueWithoutCampaignInput {
  where: SparkWhereUniqueInput;
  update: SparkUpdateWithoutCampaignDataInput;
  create: SparkCreateWithoutCampaignInput;
}

export type LikeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SparkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: SparkScalarWhereInput[] | SparkScalarWhereInput;
  OR?: SparkScalarWhereInput[] | SparkScalarWhereInput;
  NOT?: SparkScalarWhereInput[] | SparkScalarWhereInput;
}

export interface UserCreateWithoutCampaignsInput {
  id: ID_Input;
  firstName: String;
  secondName: String;
  username: String;
  email: String;
  password: String;
  sparks?: SparkCreateManyWithoutPostedByInput;
  likes?: LikeCreateManyWithoutUserInput;
  dislikes?: DislikeCreateManyWithoutUserInput;
}

export interface SparkUpdateManyWithWhereNestedInput {
  where: SparkScalarWhereInput;
  data: SparkUpdateManyDataInput;
}

export interface LikeCreateWithoutSparkInput {
  id: ID_Input;
  user: UserCreateOneWithoutLikesInput;
  campaign?: CampaignCreateOneWithoutLikesInput;
}

export interface CampaignUpdateManyWithWhereNestedInput {
  where: CampaignScalarWhereInput;
  data: CampaignUpdateManyDataInput;
}

export interface CampaignScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  OR?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
  NOT?: CampaignScalarWhereInput[] | CampaignScalarWhereInput;
}

export interface CampaignUpsertWithWhereUniqueWithoutPostedByInput {
  where: CampaignWhereUniqueInput;
  update: CampaignUpdateWithoutPostedByDataInput;
  create: CampaignCreateWithoutPostedByInput;
}

export interface SparkUpdateManyDataInput {
  id?: ID_Input;
  createdAt?: DateTimeInput;
  description?: String;
  body?: String;
  url?: String;
}

export interface CampaignCreateWithoutDislikesInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  url: String;
  postedBy: UserCreateOneWithoutCampaignsInput;
  sparks?: SparkCreateManyWithoutCampaignInput;
  likes?: LikeCreateManyWithoutCampaignInput;
}

export interface SparkCreateWithoutLikesInput {
  id: ID_Input;
  createdAt: DateTimeInput;
  description: String;
  body: String;
  url: String;
  postedBy: UserCreateOneWithoutSparksInput;
  campaign?: CampaignCreateOneWithoutSparksInput;
  dislikes?: DislikeCreateManyWithoutSparkInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export interface UserUpdateManyMutationInput {
  id?: ID_Input;
  firstName?: String;
  secondName?: String;
  username?: String;
  email?: String;
  password?: String;
}

export interface LikeCreateWithoutUserInput {
  id: ID_Input;
  spark?: SparkCreateOneWithoutLikesInput;
  campaign?: CampaignCreateOneWithoutLikesInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  secondName: String;
  username: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  secondName: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  secondName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface CampaignEdge {
  node: Campaign;
  cursor: String;
}

export interface CampaignEdgePromise
  extends Promise<CampaignEdge>,
    Fragmentable {
  node: <T = CampaignPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampaignEdgeSubscription
  extends Promise<AsyncIterator<CampaignEdge>>,
    Fragmentable {
  node: <T = CampaignSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Spark {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  body: String;
  url: String;
}

export interface SparkPromise extends Promise<Spark>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  body: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  campaign: <T = CampaignPromise>() => T;
  likes: <T = FragmentableArray<Like>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dislikes: <T = FragmentableArray<Dislike>>(
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SparkSubscription
  extends Promise<AsyncIterator<Spark>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  campaign: <T = CampaignSubscription>() => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dislikes: <T = Promise<AsyncIterator<DislikeSubscription>>>(
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCampaign {
  count: Int;
}

export interface AggregateCampaignPromise
  extends Promise<AggregateCampaign>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampaignSubscription
  extends Promise<AsyncIterator<AggregateCampaign>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  secondName: String;
  username: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  secondName: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  sparks: <T = FragmentableArray<Spark>>(
    args?: {
      where?: SparkWhereInput;
      orderBy?: SparkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaigns: <T = FragmentableArray<Campaign>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = FragmentableArray<Like>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dislikes: <T = FragmentableArray<Dislike>>(
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  secondName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  sparks: <T = Promise<AsyncIterator<SparkSubscription>>>(
    args?: {
      where?: SparkWhereInput;
      orderBy?: SparkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  campaigns: <T = Promise<AsyncIterator<CampaignSubscription>>>(
    args?: {
      where?: CampaignWhereInput;
      orderBy?: CampaignOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dislikes: <T = Promise<AsyncIterator<DislikeSubscription>>>(
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SparkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  body: String;
  url: String;
}

export interface SparkPreviousValuesPromise
  extends Promise<SparkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  body: () => Promise<String>;
  url: () => Promise<String>;
}

export interface SparkPreviousValuesSubscription
  extends Promise<AsyncIterator<SparkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CampaignConnection {
  pageInfo: PageInfo;
  edges: CampaignEdge[];
}

export interface CampaignConnectionPromise
  extends Promise<CampaignConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampaignEdge>>() => T;
  aggregate: <T = AggregateCampaignPromise>() => T;
}

export interface CampaignConnectionSubscription
  extends Promise<AsyncIterator<CampaignConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampaignEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampaignSubscription>() => T;
}

export interface SparkEdge {
  node: Spark;
  cursor: String;
}

export interface SparkEdgePromise extends Promise<SparkEdge>, Fragmentable {
  node: <T = SparkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SparkEdgeSubscription
  extends Promise<AsyncIterator<SparkEdge>>,
    Fragmentable {
  node: <T = SparkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Campaign {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface CampaignPromise extends Promise<Campaign>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  sparks: <T = FragmentableArray<Spark>>(
    args?: {
      where?: SparkWhereInput;
      orderBy?: SparkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = FragmentableArray<Like>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dislikes: <T = FragmentableArray<Dislike>>(
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CampaignSubscription
  extends Promise<AsyncIterator<Campaign>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  sparks: <T = Promise<AsyncIterator<SparkSubscription>>>(
    args?: {
      where?: SparkWhereInput;
      orderBy?: SparkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(
    args?: {
      where?: LikeWhereInput;
      orderBy?: LikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dislikes: <T = Promise<AsyncIterator<DislikeSubscription>>>(
    args?: {
      where?: DislikeWhereInput;
      orderBy?: DislikeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CampaignSubscriptionPayload {
  mutation: MutationType;
  node: Campaign;
  updatedFields: String[];
  previousValues: CampaignPreviousValues;
}

export interface CampaignSubscriptionPayloadPromise
  extends Promise<CampaignSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampaignPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampaignPreviousValuesPromise>() => T;
}

export interface CampaignSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampaignSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampaignSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampaignPreviousValuesSubscription>() => T;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface CampaignPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface CampaignPreviousValuesPromise
  extends Promise<CampaignPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface CampaignPreviousValuesSubscription
  extends Promise<AsyncIterator<CampaignPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface DislikeEdge {
  node: Dislike;
  cursor: String;
}

export interface DislikeEdgePromise extends Promise<DislikeEdge>, Fragmentable {
  node: <T = DislikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DislikeEdgeSubscription
  extends Promise<AsyncIterator<DislikeEdge>>,
    Fragmentable {
  node: <T = DislikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SparkSubscriptionPayload {
  mutation: MutationType;
  node: Spark;
  updatedFields: String[];
  previousValues: SparkPreviousValues;
}

export interface SparkSubscriptionPayloadPromise
  extends Promise<SparkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SparkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SparkPreviousValuesPromise>() => T;
}

export interface SparkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SparkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SparkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SparkPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface DislikeSubscriptionPayload {
  mutation: MutationType;
  node: Dislike;
  updatedFields: String[];
  previousValues: DislikePreviousValues;
}

export interface DislikeSubscriptionPayloadPromise
  extends Promise<DislikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DislikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DislikePreviousValuesPromise>() => T;
}

export interface DislikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DislikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DislikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DislikePreviousValuesSubscription>() => T;
}

export interface Like {
  id: ID_Output;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  spark: <T = SparkPromise>() => T;
  user: <T = UserPromise>() => T;
  campaign: <T = CampaignPromise>() => T;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spark: <T = SparkSubscription>() => T;
  user: <T = UserSubscription>() => T;
  campaign: <T = CampaignSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LikePreviousValues {
  id: ID_Output;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface Dislike {
  id: ID_Output;
}

export interface DislikePromise extends Promise<Dislike>, Fragmentable {
  id: () => Promise<ID_Output>;
  spark: <T = SparkPromise>() => T;
  user: <T = UserPromise>() => T;
  campaign: <T = CampaignPromise>() => T;
}

export interface DislikeSubscription
  extends Promise<AsyncIterator<Dislike>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  spark: <T = SparkSubscription>() => T;
  user: <T = UserSubscription>() => T;
  campaign: <T = CampaignSubscription>() => T;
}

export interface DislikePreviousValues {
  id: ID_Output;
}

export interface DislikePreviousValuesPromise
  extends Promise<DislikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface DislikePreviousValuesSubscription
  extends Promise<AsyncIterator<DislikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregateDislike {
  count: Int;
}

export interface AggregateDislikePromise
  extends Promise<AggregateDislike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDislikeSubscription
  extends Promise<AsyncIterator<AggregateDislike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SparkConnection {
  pageInfo: PageInfo;
  edges: SparkEdge[];
}

export interface SparkConnectionPromise
  extends Promise<SparkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SparkEdge>>() => T;
  aggregate: <T = AggregateSparkPromise>() => T;
}

export interface SparkConnectionSubscription
  extends Promise<AsyncIterator<SparkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SparkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSparkSubscription>() => T;
}

export interface AggregateSpark {
  count: Int;
}

export interface AggregateSparkPromise
  extends Promise<AggregateSpark>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSparkSubscription
  extends Promise<AsyncIterator<AggregateSpark>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DislikeConnection {
  pageInfo: PageInfo;
  edges: DislikeEdge[];
}

export interface DislikeConnectionPromise
  extends Promise<DislikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DislikeEdge>>() => T;
  aggregate: <T = AggregateDislikePromise>() => T;
}

export interface DislikeConnectionSubscription
  extends Promise<AsyncIterator<DislikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DislikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDislikeSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Spark",
    embedded: false
  },
  {
    name: "Campaign",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Dislike",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/todor-stoev/spark/dev`
});
export const prisma = new Prisma();
